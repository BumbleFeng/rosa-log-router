AWSTemplateFormatVersion: '2010-09-09'
Description: 'Lambda functions for multi-tenant log distribution'

Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues: [production, staging, development]
    Description: Environment name
    
  ProjectName:
    Type: String
    Default: multi-tenant-logging
    Description: Name of the project for resource naming
    
  LogDistributorRoleArn:
    Type: String
    Description: ARN of the log distributor Lambda IAM role
    
  TenantConfigTableName:
    Type: String
    Description: Name of the tenant configuration DynamoDB table
    
  LogDeliveryQueueArn:
    Type: String
    Description: ARN of the log delivery SQS queue

Resources:
  # CloudWatch Log Group for Lambda functions
  LogDistributorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${ProjectName}-${Environment}-log-distributor'
      RetentionInDays: 14
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  # Dead Letter Queue for failed Lambda invocations

  # Main Lambda function for log distribution
  LogDistributorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-log-distributor'
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !Ref LogDistributorRoleArn
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import logging
          from datetime import datetime

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              """
              Lambda function to distribute logs to tenant accounts
              """
              try:
                  logger.info("Processing log distribution request")
                  # Placeholder implementation
                  for record in event.get('Records', []):
                      logger.info(f"Processing record: {record.get('messageId', 'unknown')}")
                  
                  return {'statusCode': 200, 'processed': len(event.get('Records', []))}
                  
              except Exception as e:
                  logger.error(f"Error processing logs: {e}")
                  raise
      Environment:
        Variables:
          TENANT_CONFIG_TABLE: !Ref TenantConfigTableName
          MAX_BATCH_SIZE: "1000"
          RETRY_ATTEMPTS: "3"
      Timeout: 120
      MemorySize: 512
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-log-distributor'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  # Event Source Mapping for SQS to Lambda
  LogDeliveryEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !Ref LogDeliveryQueueArn
      FunctionName: !Ref LogDistributorFunction
      BatchSize: 10
      MaximumBatchingWindowInSeconds: 5


Outputs:
  LogDistributorFunctionName:
    Description: Name of the log distributor Lambda function
    Value: !Ref LogDistributorFunction
    Export:
      Name: !Sub '${AWS::StackName}-LogDistributorFunctionName'

  LogDistributorFunctionArn:
    Description: ARN of the log distributor Lambda function
    Value: !GetAtt LogDistributorFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LogDistributorFunctionArn'