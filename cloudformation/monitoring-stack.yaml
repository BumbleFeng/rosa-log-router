AWSTemplateFormatVersion: '2010-09-09'
Description: 'Monitoring, alerting, and SNS/SQS resources for multi-tenant logging'

Parameters:
  Environment:
    Type: String
    Default: production
    AllowedValues: [production, staging, development]
    Description: Environment name
    
  ProjectName:
    Type: String
    Default: multi-tenant-logging
    Description: Name of the project for resource naming
    
  EnableDetailedMonitoring:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: Enable detailed CloudWatch monitoring
    
  EnableEnhancedMonitoring:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: Enable enhanced monitoring and custom metrics
    
  AlertEmailEndpoints:
    Type: CommaDelimitedList
    Default: ""
    Description: List of email addresses for alerts
    
  LogDistributorFunctionName:
    Type: String
    Description: Name of the log distributor Lambda function
    
  DLQProcessorFunctionName:
    Type: String
    Description: Name of the DLQ processor Lambda function
    
  FirehoseDeliveryStreamName:
    Type: String
    Description: Name of the Firehose delivery stream
    
  CentralLoggingBucketName:
    Type: String
    Description: Name of the central logging S3 bucket
    
  TenantConfigTableName:
    Type: String
    Description: Name of the tenant configuration DynamoDB table
    
  CostCenter:
    Type: String
    Default: ""
    Description: Cost center for billing allocation

Conditions:
  HasCostCenter: !Not [!Equals [!Ref CostCenter, ""]]
  HasAlertEmails: !Not [!Equals [!Join ["", !Ref AlertEmailEndpoints], ""]]
  IsDetailedMonitoringEnabled: !Equals [!Ref EnableDetailedMonitoring, "true"]
  IsEnhancedMonitoringEnabled: !Equals [!Ref EnableEnhancedMonitoring, "true"]
  HasDLQProcessor: !Not [!Equals [!Ref DLQProcessorFunctionName, ""]]

Resources:
  # SNS topic for log delivery hub (hub and spoke pattern)
  LogDeliveryHubTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-${Environment}-log-delivery-hub'
      KmsMasterKeyId: alias/aws/sns
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation
        - Key: CostCenter
          Value: !If [HasCostCenter, !Ref CostCenter, !Ref 'AWS::NoValue']

  # SNS topic policy to allow S3 to publish messages
  LogDeliveryHubTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref LogDeliveryHubTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowS3Publish
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: SNS:Publish
            Resource: !Ref LogDeliveryHubTopic
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref AWS::AccountId
              ArnEquals:
                'aws:SourceArn': !Sub 'arn:aws:s3:::${CentralLoggingBucketName}'

  # SQS queue for log delivery processing
  LogDeliveryQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ProjectName}-${Environment}-log-delivery-queue'
      MessageRetentionPeriod: 1209600  # 14 days
      VisibilityTimeoutSeconds: 900    # 15 minutes
      ReceiveMessageWaitTimeSeconds: 20 # Long polling
      KmsMasterKeyId: alias/aws/sqs
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt LogDeliveryDLQ.Arn
        maxReceiveCount: 3
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation
        - Key: CostCenter
          Value: !If [HasCostCenter, !Ref CostCenter, !Ref 'AWS::NoValue']

  # Dead Letter Queue for failed messages
  LogDeliveryDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${ProjectName}-${Environment}-log-delivery-dlq'
      MessageRetentionPeriod: 1209600  # 14 days
      KmsMasterKeyId: alias/aws/sqs
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation
        - Key: CostCenter
          Value: !If [HasCostCenter, !Ref CostCenter, !Ref 'AWS::NoValue']

  # SQS queue policy
  LogDeliveryQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - !Ref LogDeliveryQueue
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowSNSMessages
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action: sqs:SendMessage
            Resource: !GetAtt LogDeliveryQueue.Arn
            Condition:
              ArnEquals:
                'aws:SourceArn': !Ref LogDeliveryHubTopic

  # SNS subscription: SNS topic to SQS queue
  LogDeliveryQueueSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref LogDeliveryHubTopic
      Protocol: sqs
      Endpoint: !GetAtt LogDeliveryQueue.Arn
      FilterPolicy:
        eventSource: 
          - "aws:s3"
        eventName:
          - "ObjectCreated:Put"
          - "ObjectCreated:Post"
          - "ObjectCreated:CompleteMultipartUpload"

  # SNS topic for alerts and monitoring
  AlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-${Environment}-alerts'
      KmsMasterKeyId: alias/aws/sns
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation
        - Key: CostCenter
          Value: !If [HasCostCenter, !Ref CostCenter, !Ref 'AWS::NoValue']

  # Email subscriptions for alerts
  AlertEmailSubscriptions:
    Type: AWS::CloudFormation::CustomResource
    Condition: HasAlertEmails
    Properties:
      ServiceToken: !GetAtt AlertEmailSubscriptionFunction.Arn
      TopicArn: !Ref AlertsTopic
      EmailEndpoints: !Ref AlertEmailEndpoints

  AlertEmailSubscriptionFunction:
    Type: AWS::Lambda::Function
    Condition: HasAlertEmails
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-alert-email-subscriptions'
      Runtime: python3.11
      Handler: index.lambda_handler
      Role: !GetAtt AlertEmailSubscriptionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          
          def lambda_handler(event, context):
              try:
                  sns = boto3.client('sns')
                  topic_arn = event['ResourceProperties']['TopicArn']
                  email_endpoints = event['ResourceProperties']['EmailEndpoints']
                  
                  if event['RequestType'] == 'Create':
                      # Subscribe email addresses to SNS topic
                      for email in email_endpoints:
                          if email.strip():
                              sns.subscribe(
                                  TopicArn=topic_arn,
                                  Protocol='email',
                                  Endpoint=email.strip()
                              )
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  elif event['RequestType'] == 'Delete':
                      # Optionally unsubscribe emails on deletion
                      # For simplicity, we'll skip this as emails can be manually managed
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      
              except Exception as e:
                  print(f"Error: {e}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  AlertEmailSubscriptionRole:
    Type: AWS::IAM::Role
    Condition: HasAlertEmails
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SNSSubscriptionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Subscribe
                  - sns:Unsubscribe
                  - sns:ListSubscriptionsByTopic
                Resource: !Ref AlertsTopic

  # CloudWatch Dashboard
  MonitoringDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${ProjectName}-${Environment}-overview'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "x": 0,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Kinesis/Firehose", "DeliveryToS3.Records", "DeliveryStreamName", "${FirehoseDeliveryStreamName}"],
                  ["AWS/Kinesis/Firehose", "DeliveryToS3.Success", "DeliveryStreamName", "${FirehoseDeliveryStreamName}"],
                  ["AWS/Kinesis/Firehose", "DeliveryToS3.DataFreshness", "DeliveryStreamName", "${FirehoseDeliveryStreamName}"]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Firehose Delivery Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 0,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/Lambda", "Invocations", "FunctionName", "${LogDistributorFunctionName}"],
                  ["AWS/Lambda", "Errors", "FunctionName", "${LogDistributorFunctionName}"],
                  ["AWS/Lambda", "Duration", "FunctionName", "${LogDistributorFunctionName}"],
                  ["AWS/Lambda", "Throttles", "FunctionName", "${LogDistributorFunctionName}"]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "Lambda Function Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 0,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/SQS", "ApproximateNumberOfVisibleMessages", "QueueName", "${LogDeliveryQueue.QueueName}"],
                  ["AWS/SQS", "ApproximateAgeOfOldestMessage", "QueueName", "${LogDeliveryQueue.QueueName}"],
                  ["AWS/SQS", "NumberOfMessagesSent", "QueueName", "${LogDeliveryQueue.QueueName}"],
                  ["AWS/SQS", "NumberOfMessagesReceived", "QueueName", "${LogDeliveryQueue.QueueName}"]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "SQS Queue Metrics",
                "period": 300
              }
            },
            {
              "type": "metric",
              "x": 12,
              "y": 6,
              "width": 12,
              "height": 6,
              "properties": {
                "metrics": [
                  ["AWS/DynamoDB", "ConsumedReadCapacityUnits", "TableName", "${TenantConfigTableName}"],
                  ["AWS/DynamoDB", "ConsumedWriteCapacityUnits", "TableName", "${TenantConfigTableName}"],
                  ["AWS/DynamoDB", "SuccessfulRequestLatency", "TableName", "${TenantConfigTableName}", "Operation", "GetItem"],
                  ["AWS/DynamoDB", "SuccessfulRequestLatency", "TableName", "${TenantConfigTableName}", "Operation", "Query"]
                ],
                "view": "timeSeries",
                "stacked": false,
                "region": "${AWS::Region}",
                "title": "DynamoDB Metrics",
                "period": 300
              }
            }
          ]
        }

  # CloudWatch Alarms for SQS monitoring
  SQSQueueDepthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-sqs-queue-depth'
      AlarmDescription: 'Alarm when SQS queue depth is high'
      MetricName: ApproximateNumberOfVisibleMessages
      Namespace: AWS/SQS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 100
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlertsTopic
      OKActions:
        - !Ref AlertsTopic
      Dimensions:
        - Name: QueueName
          Value: !GetAtt LogDeliveryQueue.QueueName
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  SQSMessageAgeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-sqs-message-age'
      AlarmDescription: 'Alarm when SQS message age is high'
      MetricName: ApproximateAgeOfOldestMessage
      Namespace: AWS/SQS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 600  # 10 minutes
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlertsTopic
      OKActions:
        - !Ref AlertsTopic
      Dimensions:
        - Name: QueueName
          Value: !GetAtt LogDeliveryQueue.QueueName
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  DLQMessageCountAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-dlq-message-count'
      AlarmDescription: 'Alarm when messages appear in DLQ'
      MetricName: ApproximateNumberOfVisibleMessages
      Namespace: AWS/SQS
      Statistic: Average
      Period: 300
      EvaluationPeriods: 1
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlertsTopic
      Dimensions:
        - Name: QueueName
          Value: !GetAtt LogDeliveryDLQ.QueueName
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  # CloudWatch Alarms for DynamoDB monitoring
  DynamoDBReadThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-dynamodb-read-throttle'
      AlarmDescription: 'Alarm when DynamoDB read throttling occurs'
      MetricName: ReadThrottledEvents
      Namespace: AWS/DynamoDB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlertsTopic
      Dimensions:
        - Name: TableName
          Value: !Ref TenantConfigTableName
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  DynamoDBWriteThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ProjectName}-${Environment}-dynamodb-write-throttle'
      AlarmDescription: 'Alarm when DynamoDB write throttling occurs'
      MetricName: WriteThrottledEvents
      Namespace: AWS/DynamoDB
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 0
      ComparisonOperator: GreaterThanThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref AlertsTopic
      Dimensions:
        - Name: TableName
          Value: !Ref TenantConfigTableName
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  # Cost Anomaly Detection
  CostAnomalyDetector:
    Type: AWS::CE::AnomalyDetector
    Properties:
      AnomalyDetectorName: !Sub '${ProjectName}-${Environment}-cost-anomaly'
      MonitorType: DIMENSIONAL
      MonitorSpecification: !Sub |
        {
          "Dimension": "SERVICE",
          "MatchOptions": ["EQUALS"],
          "Values": [
            "Amazon Kinesis Firehose",
            "Amazon Simple Storage Service",
            "AWS Lambda",
            "Amazon Simple Queue Service",
            "Amazon DynamoDB"
          ]
        }
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  # Cost Budget
  CostBudget:
    Type: AWS::Budgets::Budget
    Properties:
      Budget:
        BudgetName: !Sub '${ProjectName}-${Environment}-monthly-budget'
        BudgetType: COST
        BudgetLimit:
          Amount: 1000  # Adjust based on expected costs
          Unit: USD
        TimeUnit: MONTHLY
        CostFilters:
          TagKey:
            - Project
          TagValue:
            - !Ref ProjectName
        NotificationsWithSubscribers:
          - Notification:
              ComparisonOperator: GREATER_THAN
              Threshold: 80
              ThresholdType: PERCENTAGE
              NotificationType: ACTUAL
            Subscribers:
              - !If
                - HasAlertEmails
                - SubscriptionType: EMAIL
                  Address: !Select [0, !Ref AlertEmailEndpoints]
                - !Ref AWS::NoValue
          - Notification:
              ComparisonOperator: GREATER_THAN
              Threshold: 100
              ThresholdType: PERCENTAGE
              NotificationType: FORECASTED
            Subscribers:
              - !If
                - HasAlertEmails
                - SubscriptionType: EMAIL
                  Address: !Select [0, !Ref AlertEmailEndpoints]
                - !Ref AWS::NoValue

  # Resource Groups for easier management
  ResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Sub '${ProjectName}-${Environment}-infrastructure'
      Description: Resources for multi-tenant logging infrastructure
      ResourceQuery:
        Type: TAG_FILTERS_1_0
        Query:
          ResourceTypeFilters:
            - AWS::AllSupported
          TagFilters:
            - Key: Project
              Values:
                - !Ref ProjectName
            - Key: Environment
              Values:
                - !Ref Environment
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

Outputs:
  LogDeliveryHubTopicArn:
    Description: ARN of the log delivery hub SNS topic
    Value: !Ref LogDeliveryHubTopic
    Export:
      Name: !Sub '${AWS::StackName}-LogDeliveryHubTopicArn'

  LogDeliveryQueueName:
    Description: Name of the log delivery SQS queue
    Value: !GetAtt LogDeliveryQueue.QueueName
    Export:
      Name: !Sub '${AWS::StackName}-LogDeliveryQueueName'

  LogDeliveryQueueArn:
    Description: ARN of the log delivery SQS queue
    Value: !GetAtt LogDeliveryQueue.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LogDeliveryQueueArn'

  LogDeliveryDLQName:
    Description: Name of the log delivery DLQ
    Value: !GetAtt LogDeliveryDLQ.QueueName
    Export:
      Name: !Sub '${AWS::StackName}-LogDeliveryDLQName'

  LogDeliveryDLQArn:
    Description: ARN of the log delivery DLQ
    Value: !GetAtt LogDeliveryDLQ.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LogDeliveryDLQArn'

  AlertsTopicArn:
    Description: ARN of the alerts SNS topic
    Value: !Ref AlertsTopic
    Export:
      Name: !Sub '${AWS::StackName}-AlertsTopicArn'

  CloudWatchDashboardURL:
    Description: URL of the CloudWatch dashboard
    Value: !Sub 'https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${ProjectName}-${Environment}-overview'
    Export:
      Name: !Sub '${AWS::StackName}-CloudWatchDashboardURL'

  ResourceGroupName:
    Description: Name of the resource group
    Value: !Ref ResourceGroup
    Export:
      Name: !Sub '${AWS::StackName}-ResourceGroupName'

  CostAnomalyDetectorArn:
    Description: ARN of the cost anomaly detector
    Value: !GetAtt CostAnomalyDetector.AnomalyDetectorArn
    Export:
      Name: !Sub '${AWS::StackName}-CostAnomalyDetectorArn'