AWSTemplateFormatVersion: '2010-09-09'
Description: 'Core infrastructure for multi-tenant logging - S3, DynamoDB, KMS, and IAM'

Parameters:
  Environment:
    Type: String
    Default: development
    AllowedValues: [production, staging, development]
    Description: Environment name

  ProjectName:
    Type: String
    Default: multi-tenant-logging
    Description: Name of the project for resource naming

  EksOidcIssuer:
    Type: String
    Default: ""
    Description: OIDC issuer URL for the EKS cluster (without https://)

  S3StandardIADays:
    Type: Number
    Default: 30
    MinValue: 1
    Description: Days after which to transition S3 objects to Standard-IA

  S3GlacierDays:
    Type: Number
    Default: 90
    MinValue: 1
    Description: Days after which to transition S3 objects to Glacier

  S3DeepArchiveDays:
    Type: Number
    Default: 365
    MinValue: 1
    Description: Days after which to transition S3 objects to Deep Archive

  S3LogRetentionDays:
    Type: Number
    Default: 2555
    MinValue: 1
    Description: Number of days to retain logs in S3

  EnableS3IntelligentTiering:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: Enable S3 Intelligent Tiering for cost optimization

  EnableS3Encryption:
    Type: String
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: Enable S3 server-side encryption

Conditions:
  HasEksOidcIssuer: !Not [!Equals [!Ref EksOidcIssuer, ""]]
  IsS3IntelligentTieringEnabled: !Equals [!Ref EnableS3IntelligentTiering, "true"]
  IsS3EncryptionEnabled: !Equals [!Ref EnableS3Encryption, "true"]

Resources:
  # Random suffix for unique bucket names
  RandomSuffix:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt RandomSuffixFunction.Arn

  RandomSuffixFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-random-suffix'
      Runtime: python3.13
      Handler: index.lambda_handler
      Role: !GetAtt RandomSuffixFunctionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import random
          import string
          import cfnresponse
          
          def lambda_handler(event, context):
              try:
                  if event['RequestType'] == 'Create':
                      # Generate 8 character random suffix
                      suffix = ''.join(random.choices(string.ascii_lowercase + string.digits, k=8))
                      response_data = {'RandomSuffix': suffix}
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                  else:
                      # For Update/Delete, return existing suffix if available
                      suffix = event.get('PhysicalResourceId', '12345678')
                      response_data = {'RandomSuffix': suffix}
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              except Exception as e:
                  print(f"Error: {e}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  RandomSuffixFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  # KMS Key for encryption (conditional)
  LoggingKMSKey:
    Type: AWS::KMS::Key
    Condition: IsS3EncryptionEnabled
    Properties:
      Description: KMS key for multi-tenant logging encryption
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Allow use of the key for S3
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: '*'
          - Sid: Allow use of the key for Lambda
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: '*'
      EnableKeyRotation: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-kms-key'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  LoggingKMSKeyAlias:
    Type: AWS::KMS::Alias
    Condition: IsS3EncryptionEnabled
    Properties:
      AliasName: !Sub 'alias/${ProjectName}-${Environment}-logging'
      TargetKeyId: !Ref LoggingKMSKey

  # Central S3 Bucket for log storage
  CentralLoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-${Environment}-central-${RandomSuffix.RandomSuffix}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: !If [IsS3EncryptionEnabled, 'aws:kms', 'AES256']
              KMSMasterKeyID: !If [IsS3EncryptionEnabled, !Ref LoggingKMSKey, !Ref 'AWS::NoValue']
            BucketKeyEnabled: !If [IsS3EncryptionEnabled, true, false]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: LogRetentionAndTransition
            Status: Enabled
            Transitions:
              - TransitionInDays: !Ref S3StandardIADays
                StorageClass: STANDARD_IA
              - TransitionInDays: !Ref S3GlacierDays
                StorageClass: GLACIER
              - TransitionInDays: !Ref S3DeepArchiveDays
                StorageClass: DEEP_ARCHIVE
            ExpirationInDays: !Ref S3LogRetentionDays
          - Id: IntelligentTiering
            Status: !If [IsS3IntelligentTieringEnabled, Enabled, Disabled]
            Transitions:
              - TransitionInDays: 1
                StorageClass: INTELLIGENT_TIERING
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-central-logging'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  # S3 Bucket Notification Configuration (using custom resource to avoid circular dependency)
  S3BucketNotification:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt S3NotificationFunction.Arn
      BucketName: !Ref CentralLoggingBucket
      TopicArn: !Ref LogDeliveryTopic

  S3NotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-${Environment}-s3-notification-config'
      Runtime: python3.13
      Handler: index.lambda_handler
      Role: !GetAtt S3NotificationFunctionRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          
          def lambda_handler(event, context):
              try:
                  request_type = event['RequestType']
                  bucket_name = event['ResourceProperties']['BucketName']
                  topic_arn = event['ResourceProperties']['TopicArn']
                  
                  s3 = boto3.client('s3')
                  
                  if request_type == 'Create' or request_type == 'Update':
                      # Configure S3 bucket notification
                      notification_config = {
                          'TopicConfigurations': [
                              {
                                  'Id': 'LogDeliveryNotification',
                                  'TopicArn': topic_arn,
                                  'Events': ['s3:ObjectCreated:*'],
                                  'Filter': {
                                      'Key': {
                                          'FilterRules': [
                                              {
                                                  'Name': 'suffix',
                                                  'Value': '.gz'
                                              }
                                          ]
                                      }
                                  }
                              }
                          ]
                      }
                      
                      s3.put_bucket_notification_configuration(
                          Bucket=bucket_name,
                          NotificationConfiguration=notification_config
                      )
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  elif request_type == 'Delete':
                      # Remove notification configuration
                      s3.put_bucket_notification_configuration(
                          Bucket=bucket_name,
                          NotificationConfiguration={}
                      )
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      
              except Exception as e:
                  print(f"Error: {e}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  S3NotificationFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3NotificationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetBucketNotification
                  - s3:PutBucketNotification
                Resource: !GetAtt CentralLoggingBucket.Arn

  # SNS topic for log delivery notifications
  LogDeliveryTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${ProjectName}-${Environment}-log-delivery'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  # SNS topic policy to allow S3 to publish messages
  LogDeliveryTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref LogDeliveryTopic
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowS3Publish
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: SNS:Publish
            Resource: !Ref LogDeliveryTopic
            Condition:
              StringEquals:
                'aws:SourceAccount': !Ref AWS::AccountId
              ArnEquals:
                'aws:SourceArn': !GetAtt CentralLoggingBucket.Arn



  # S3 Access Log Group
  S3AccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/s3/${ProjectName}-${Environment}-access'
      RetentionInDays: 30
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  # DynamoDB Table for tenant configurations
  TenantConfigTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${ProjectName}-${Environment}-tenant-configs'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: tenant_id
          AttributeType: S
        - AttributeName: account_id
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: tenant_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: AccountIdIndex
          KeySchema:
            - AttributeName: account_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: status
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
        SSEType: !If [IsS3EncryptionEnabled, KMS, !Ref 'AWS::NoValue']
        KMSMasterKeyId: !If [IsS3EncryptionEnabled, !Ref LoggingKMSKey, !Ref 'AWS::NoValue']
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-${Environment}-tenant-configs'
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  # IAM Role for Vector (EKS Service Account)
  VectorRole:
    Type: AWS::IAM::Role
    Condition: HasEksOidcIssuer
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-vector-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Sub 'arn:aws:iam::${AWS::AccountId}:oidc-provider/${EksOidcIssuer}'
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                ${EksOidcIssuer}:sub: 'system:serviceaccount:logging:vector-logs'
                ${EksOidcIssuer}:aud: 'sts.amazonaws.com'
      Policies:
        - PolicyName: VectorS3AssumeRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: !GetAtt CentralS3WriterRole.Arn
              - Effect: Allow
                Action:
                  - sts:TagSession
                Resource: '*'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  # Central S3 Writer Role for cross-account S3 access
  CentralS3WriterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-central-s3-writer-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: sts:AssumeRole
            Condition:
              StringLike:
                'aws:userid': !If
                  - HasEksOidcIssuer
                  - !Sub '${VectorRole.RoleId}:*'
                  - 'AIDAI*'  # Allow any IAM user/role in the account if no Vector role
      Policies:
        - PolicyName: S3WriterPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !Sub '${CentralLoggingBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !GetAtt LoggingKMSKey.Arn
                Condition:
                  StringEquals:
                    'kms:ViaService': !Sub 's3.${AWS::Region}.amazonaws.com'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  # IAM Role for Log Distributor Lambda
  LogDistributorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-log-distributor-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
      Policies:
        - PolicyName: LogDistributorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                Resource: !GetAtt TenantConfigTable.Arn
              - Effect: Allow
                Action:
                  - dynamodb:Query
                Resource: !Sub '${TenantConfigTable.Arn}/index/*'
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub '${CentralLoggingBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: 'arn:aws:iam::*:role/LogDistribution-*'
                Condition:
                  StringEquals:
                    'sts:ExternalId': !Ref 'AWS::AccountId'
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !GetAtt LoggingKMSKey.Arn
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: '*'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

  # IAM Role for DLQ Processor Lambda
  DLQProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${ProjectName}-${Environment}-dlq-processor-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
      Policies:
        - PolicyName: DLQProcessorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt TenantConfigTable.Arn
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Sub 'arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${ProjectName}-${Environment}-*'
              - Effect: Allow
                Action:
                  - kms:Decrypt
                  - kms:GenerateDataKey
                Resource: !GetAtt LoggingKMSKey.Arn
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: '*'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: cloudformation

Outputs:
  CentralLoggingBucketName:
    Description: Name of the central logging S3 bucket
    Value: !Ref CentralLoggingBucket
    Export:
      Name: !Sub '${AWS::StackName}-CentralLoggingBucketName'

  TenantConfigTableName:
    Description: Name of the tenant configuration DynamoDB table
    Value: !Ref TenantConfigTable
    Export:
      Name: !Sub '${AWS::StackName}-TenantConfigTableName'

  TenantConfigTableArn:
    Description: ARN of the tenant configuration DynamoDB table
    Value: !GetAtt TenantConfigTable.Arn
    Export:
      Name: !Sub '${AWS::StackName}-TenantConfigTableArn'

  # SNS Outputs
  LogDeliveryTopicArn:
    Description: ARN of the log delivery SNS topic
    Value: !Ref LogDeliveryTopic
    Export:
      Name: !Sub '${AWS::StackName}-LogDeliveryTopicArn'

  # KMS Outputs (conditional)
  KMSKeyId:
    Description: KMS key ID for encryption
    Value: !If [IsS3EncryptionEnabled, !Ref LoggingKMSKey, '']
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyId'

  KMSKeyArn:
    Description: KMS key ARN for encryption
    Value: !If [IsS3EncryptionEnabled, !GetAtt LoggingKMSKey.Arn, '']
    Export:
      Name: !Sub '${AWS::StackName}-KMSKeyArn'

  VectorRoleArn:
    Description: ARN of the Vector IAM role
    Value: !If [HasEksOidcIssuer, !GetAtt VectorRole.Arn, 'NONE']
    Export:
      Name: !Sub '${AWS::StackName}-VectorRoleArn'

  CentralS3WriterRoleArn:
    Description: ARN of the Central S3 Writer IAM role
    Value: !GetAtt CentralS3WriterRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-CentralS3WriterRoleArn'

  LogDistributorRoleArn:
    Description: ARN of the log distributor Lambda IAM role
    Value: !GetAtt LogDistributorRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LogDistributorRoleArn'

  DLQProcessorRoleArn:
    Description: ARN of the DLQ processor Lambda IAM role
    Value: !GetAtt DLQProcessorRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-DLQProcessorRoleArn'

  RandomSuffix:
    Description: Random suffix used for resource naming
    Value: !GetAtt RandomSuffix.RandomSuffix
    Export:
      Name: !Sub '${AWS::StackName}-RandomSuffix'